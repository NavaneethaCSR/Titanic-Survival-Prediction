# -*- coding: utf-8 -*-
"""Titanic Survival Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F4dI3l3GDe4KKr32jwi39hXQnc_toACp
"""

import numpy as np
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.preprocessing import  StandardScaler,LabelEncoder
from sklearn.metrics import accuracy_score,precision_score
from sklearn.model_selection import train_test_split

from google.colab import drive
drive.mount('/content/drive')

"""# Read the dataset"""

df1=pd.read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vQrN89wAI7dl9dhXdgIcANJP2PVJp21QKgLGqV_NxeLV4k1sL79uVujwP_js6vuwu1cdaPaEnw2jBb2/pub?gid=258007166&single=true&output=csv")

"""# Data Preprocessing

1.Handle missiing values
"""

mean_age = df1['Age'].mean()
df1.fillna({'Age': mean_age}, inplace=True)  # Found missing values in the column named Age and replace by taking its mean

mean_age = df1['Fare'].mean()
df1.fillna({'Fare': mean_age}, inplace=True)  # Found missing values in the column named Fare and replace by taking its mean

"""2.Convert categorial feature to numerical feature

"""

df1['Sex']=df1['Sex'].map({'male':0,'female':1}) # map male and female in column named Sex with 0 and 1 respectively

"""3.Label categorial values with numbers"""

df1['Embarked'] = LabelEncoder().fit_transform(df1['Embarked'])  # label Q,S,C with 0,1,2 respectively

"""# Extract relevant features and Target variable"""

X = df1[['PassengerId', 'Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]      # Features
y = df1['Survived']            # Target variable

"""# Split the dataset into train and test"""

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)                                                  # 80% training and 20% testing

"""# Normalize the extracted features"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""## Model selection-used KNN classifier"""

knn_classifier = KNeighborsClassifier(n_neighbors=3)
knn_classifier.fit(X_train_scaled,y_train)

"""# Model Evaluation-used accuracy,precision"""

predictions = knn_classifier.predict(X_test_scaled)
accuracy = accuracy_score(y_test, predictions)
precision = precision_score(y_test, predictions, average='weighted')

print(accuracy)
print(precision)   # found KNN claasifer can make a prediction on survival of passagners in titanic disaster with 97 % accuracy and precision on unseen data